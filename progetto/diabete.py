# -*- coding: utf-8 -*-
"""Diabete.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZYFzo2GVQE1up0ju7c0yoEN3UrIgfuQh
"""


import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import precision_score
from sklearn.metrics import f1_score
from sklearn.metrics import recall_score
from sklearn import metrics
from sklearn.metrics import roc_curve, roc_auc_score
import matplotlib.pyplot as plt
import streamlit as st

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier


filename='diabates_model.sav'
pickle.dump(classifier,(open(filename,'wb')))

#loaded_classifier=pickle.load("diabetes_model.sav","rb")

diabetes_model = pickle.load(open('C:\Users\pietr\Desktop\progetto\diabates_model.sav','rb'))

#per caricare dataset
#diabates_dataset = pd.read_csv('/content/diabetes.csv')


scaler = StandardScaler()


"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape,Y.shape,Y_test.shape,Y_train.shape)

"""Cross validation"""

# list of models
models = [LogisticRegression(C= 1.0, penalty= 'l2', solver= 'liblinear'), SVC(kernel='rbf', C=1000), KNeighborsClassifier(n_neighbors=30,weights='distance',metric='manhattan'), RandomForestClassifier(n_estimators= 100,max_depth= 30, min_samples_split = 16)]

def compare_models_cross_validation():

  for model in models:

    cv_score = cross_val_score(model, X,Y, cv=10)
    
    mean_accuracy = sum(cv_score)/len(cv_score)

    mean_accuracy = mean_accuracy*100

    mean_accuracy = round(mean_accuracy, 2)

    print('Cross Validation accuracies for ', model, '=  ', cv_score)
    print('Accuracy % of the ', model, mean_accuracy)
    print('----------------------------------------------')

compare_models_cross_validation()

classifier=svm.SVC(kernel='rbf', C=1000,probability=True)
classifier.fit(X_train,Y_train)

X_train_prediction=classifier.predict(X_train)
X_test_prediction=classifier.predict(X_test)

auc=metrics.roc_auc_score(Y_test,X_test_prediction)
print(auc)
#plt.show(auc)

y_score1 = classifier.predict_proba(X_test)[:,1]
false_positive_rate1, true_positive_rate1, threshold1 = roc_curve(Y_test, y_score1)
plt.subplots(1, figsize=(8,8))
plt.title('Receiver Operating Characteristic')
plt.plot(false_positive_rate1, true_positive_rate1)
plt.plot([0, 1], ls="--")
plt.plot([0, 0], [1, 0] , c=".7"), plt.plot([1, 1] , c=".7")
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()

"""Precision"""

precision_train=precision_score(Y_train,X_train_prediction)
print('Training data Precision =', precision_train)

precision_test = precision_score(Y_test, X_test_prediction)
print('Test data Precision =', precision_test)

"""Predizione"""

variable_name = ""
input_data = (5,166,72,19,175,25.8,0.587,51)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)


std_data = scaler.transform(input_data_reshaped)

print(std_data)


prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

import pickle

filename='diabates_model.sav'
pickle.dump(classifier,(open(filename,'wb')))

#loaded_classifier=pickle.load("diabetes_model.sav","rb")

    


